invoice
	- sale (set in case of Invoice per full sale)
	- shipment (set in case of Invoice per shipment and Invoice per shipment sale)
	- invoiceItems
		- saleItem

Invoice per sale
	List<saleItems> sis = sale.saleItems;
	generateInvoice(sis):

Invoice per shipment
	List<saleItems> sis
	for(ShipmentItem si: shipment.shipmentItems)
		sis.add(si.saleItem);
	generateInvoice(sis):
		
Invoice per shipment sale
	List<saleItems> sis
	Map<Long, List<SaleItem>> map;
	for(ShipmentItem shipItem: shipmetn.shipmentItems)
		List<SaleItem> list = map.get(shipItem.saleItem.sale.id))
		if(list==null)
			list = new ArrayList<SaleItem>();
			map.put(shipItem.saleItem.sale.id, list);
		list.add(shipItem.saleItem);
	for(List<SaleItem> saleItems: map)
		generateInvoice(saleItems);


generateInvoice(saleItems)
	Invoice i = new Invoice();
	for(SaleItems saleItem: saleItems)
		InvoiceItem ii = new InvoiceItem():
		ii.saleItem = saleItem;
		i.add(ii);



-------------------------------------------------
Backlog functionality:
Production:
- Show box with large percentage (On target/slow (based on hours scheduled and units), %Performance/Efficiency, %Production done).
Shipment:
- Persist filter search or show shipment in popup.
Global:
- Keep search options persisted (until page refreshed or logged out).

Backlog tech-dead:
Component entity:
	persist unitsInOrder
	change all int to Long
Item entity:
	remove eager loding
	chage all int to Long
	persist unitsOnStack
Purchase entity:
	persist isReceived
PurchaseComponent entity
	change units to unitsPurchased
	persist unitsReceived	
Receiving entity
	change units to unitsReceived	
SaleItem enitty
	change all int to Long
	change units to unitsSold
Shipment entity
	change totalUnits to unitsShipped
	add to updateUnits methods instead of doing on client.
ShipmentItem entity
	change units to unitsShipped;

